module slide_intf(POT_LP, POT_B1, POT_B2, POT_B3, POT_HP, VOLUME, SS_n, SCLK, MOSI, MISO, clk, rst_n);
//output
output wire [11:0] POT_LP, POT_B1, POT_B2, POT_B3, POT_HP, VOLUME;
output wire SS_n, SCLK, MOSI;
//input
input wire MISO;
input wire clk, rst_n;
//connect signal
logic strt_cnv, cnv_cmplt;
wire [11:0]res;
logic [2:0]chnnl;

//module intf
A2D_intf A2D_slide(.strt_cnv(strt_cnv), .chnnl(chnnl), .cnv_cmplt(cnv_cmplt),
                   .res(res), .clk(clk), .rst_n(rst_n), .SCLK(SCLK), .MOSI(MOSI),
                   .MISO(MISO));

//chnnl matching logic
//ENABLE SIGNAL BONDING WITH CHNNL

//A DFF SENDING res to ALL output POT  and waiting for enable
logic [11:0]res_reg;
always_ff @(posedge clk , negedge rst_n) begin
    if (rst_n) 
        res_reg<=12'd0;
        else 
        res_reg<=res;
end

//allocate the res to different pot
//chnnl 
assign POT_B1=((chnnl==3'b000) & cnv_cmplt)?res_reg: POT_B1;
assign POT_LP=((chnnl==3'b001) & cnv_cmplt)?res_reg: POT_LP;
assign POT_B3=((chnnl==3'b010) & cnv_cmplt)?res_reg: POT_B3;
assign POT_B2=((chnnl==3'b100) & cnv_cmplt)?res_reg: POT_B2;
assign POT_HP=((chnnl==3'b011) & cnv_cmplt)?res_reg: POT_HP;
assign VOLUME=((chnnl==3'b111) & cnv_cmplt)?res_reg: VOLUME;

//RRsequencer statemachine
typedef enum reg {IDLE, CMPLT} state;
state cur_state, nxt_state;

//FF
always_ff @(posedge clk, negedge rst_n) begin
    if (!rst_n) cur_state<=IDLE;
    else cur_state<=nxt_state;
end
//COMB
always@(*) begin
    //initial
    strt_cnv=1;
    nxt_state=cur_state;
    
    
    case(cur_state)
    IDLE: if (cnv_cmplt)    
            nxt_state=CMPLT;

    CMPLT:if (!cnv_cmplt)  begin
            nxt_state=IDLE;
            strt_cnv=0;
    end
    endcase
end


//chnnl inc logic

//001,000,100,010,011,111



always_ff@ (posedge clk or negedge rst_n) begin
    if(!rst_n)         chnnl<=3'b001;
    else if (strt_cnv) begin 
		if (chnnl==3'b001) chnnl<=3'b000 ;// need reset in chnnl?
		else if (chnnl==3'b000) chnnl<=3'b100;
		else if (chnnl==3'b100) chnnl<=3'b010;
		else if (chnnl==3'b010) chnnl<=3'b011;
		else if (chnnl==3'b011) chnnl<=3'b111;
		else chnnl<=3'b000;//chnnl--'111' , next chnnl should be 3'b000
    end
	else chnnl<=chnnl;
	
else chnnl<=chnnl;
end





endmodule